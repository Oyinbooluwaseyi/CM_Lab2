import methods as meth
import math as m
def f(x):
    """Функция возвращающая значение выражения от x

    Parameters
    ----------
    x: аргумент функции\n
    mod: модификатор функции (если ищем максимум -1, иначе 1)\n
    ----------
    """

    if (x <= 0):
        print("Для x="+str(x) +
              "невозможно вычислить значение функции. Знаменатель равен нулю!")
        exit(1)
    res = (m.log(x)/x)**3
    return res
def fp(x):
    """Функция возвращающая значение первой производной выражения от x

    Parameters
    ----------
    x: аргумент функции\n
    ----------
    """
    if (x <= 0):
        print("Для x="+str(x) +
              "невозможно вычислить значение функции. Знаменатель равен нулю!")
        exit(1)
    res = (3*(m.log(x)**2)-3*(m.log(x)**3))/(x**4)
    return res


def fp2(x):
    """Функция возвращающая значение второй производной выражения от x

    Parameters
    ----------
    x: аргумент функции\n
    ----------
    """
    if (x <= 0):
        print("Для x="+str(x) +
              "невозможно вычислить значение функции. Знаменатель равен нулю!")
        exit(1)
    res = (6*(m.log(x))-21*(m.log(x))**2+12*(m.log(x))**3)/(x**5)
    return res

a = input("Введите a: ")
b = input("Введите b: ")
E = input("Введите E: ")
#a="2"
#b="3"
#for e in range(2,8):
#E = 10**(-e)
res_gold = meth.gold(f,a, b, E)
print("Для функции f(x)=(ln(x)/x)^3 в границах интервала ["+a+";"+b+"] с точностью E = "+str(E))
print("По методу золотого сечения экстремум функции: f(x)=" +
        str(round(res_gold[0], 3))+", где x="+str(round(res_gold[1], 3))+" за "+str(res_gold[2])+" итераций")

res_newton = meth.newton(f,fp,fp2,a, b, E)
print("По методу Ньютона экстремум функции: f(x)="+str(round(res_newton[0], 3))+", где x="+str(
        round(res_newton[1], 3)) + " за "+str(res_newton[2])+" итераций")
# print("Максимум функции: "+max)
